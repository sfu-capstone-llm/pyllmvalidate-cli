DIFF files=[FileInfo(path='main.py', status='M', insertions=94, deletions=22, content_before='import argparse\nimport sys\nfrom pathlib import Path\n\nfrom openai import OpenAI\nfrom pydantic import BaseModel\nfrom git import Repo, InvalidGitRepositoryError\n\n\ndef add(a: int, b: int):\n    return a - b\n\ndef multiply(a: int, b: int):\n    return a / b\n\n\nclass AIResponse(BaseModel):\n    correct: bool\n    reason: str\n\n\nsystem_prompt = f"""\nDescription:\n- You are running in a CLI tool to validate code patches.\n- You should analyze the code patches for correctness based on functionality\n- Code style should not be errors unless it is a big problem\n\nInput:\n- The output of git diff command\n- If empty treat as correct\n\nOutput:\n- Always respond with JSON in string format specified by the pydantic JSON schema that\'s provided below\n- You MUST use this format for the output\n\n\nPydantic JSON schema:\n{AIResponse.model_json_schema()}\n"""\n\n\ndef get_git_diff() -> str:\n    try:\n        repo = Repo(".")\n        diff = repo.git.diff()\n            \n        return diff\n        \n    except InvalidGitRepositoryError:\n        print(f"Error: current directory is not a valid git repository", file=sys.stderr)\n        sys.exit(1)\n    except Exception as e:\n        print(f"Error getting git diff: {e}", file=sys.stderr)\n        sys.exit(1)\n\ndef main():\n    code_diff = get_git_diff()\n\n    print(f"Git diff output:\\n{code_diff}\\n" + "="*50)\n    \n    # If diff is empty, treat as correct\n    if not code_diff.strip():\n        res = AIResponse(correct=True, reason="No changes detected in git diff")\n        print(res)\n        return\n    \n    client = initAIClient()\n    # completion = client.chat.completions.create(\n    #     model="",\n    #     messages=[\n    #         {"role": "system", "content": system_prompt},\n    #         {"role": "user", "content": code_diff},\n    #     ],\n    # )\n\n    # _res = completion.choices[0].message.content\n    _res = """{\n        "correct": "true",\n        "reason": "No changes detected in git diff."\n    }"""\n    \n    print("CODE DIFF", code_diff)\n    if _res is None:\n        print("no res back from ai")\n        return\n\n    # Clean Markdown formatting if present\n    if _res.strip().startswith("```json"):\n        _res = _res.strip().removeprefix("```json").removesuffix("```").strip()\n\n    res = AIResponse.model_validate_json(_res)\n\n    print(res)\n\n\ndef parseArgs() -> argparse.Namespace:\n    parser = argparse.ArgumentParser(description="Validate code patches using AI")\n    parser.add_argument("--env", action="store", help="Environment setting")\n    args = parser.parse_args()\n    return args\n\n\ndef initAIClient() -> OpenAI:\n    return OpenAI(base_url="http://localhost:1234/v1", api_key="lm-studio")\n\n\nif __name__ == "__main__":\n    main()')] git_diff_output='diff --git a/main.py b/main.py\nindex a6e4c68..2fc253c 100644\n--- a/main.py\n+++ b/main.py\n@@ -1,6 +1,7 @@\n import argparse\n import sys\n from pathlib import Path\n+from typing import List\n \n from openai import OpenAI\n from pydantic import BaseModel\n@@ -14,72 +15,144 @@ def multiply(a: int, b: int):\n     return a / b\n \n \n+class FileInfo(BaseModel):\n+    path: str\n+    status: str  # A (added), M (modified), D (deleted)\n+    insertions: int\n+    deletions: int\n+    content_before: str | None = None\n+\n+class DiffAnalysis(BaseModel):\n+    files: List[FileInfo]\n+    git_diff_output: str\n+\n+\n class AIResponse(BaseModel):\n     correct: bool\n     reason: str\n \n \n-system_prompt = f"""\n+system_prompt_template = """\n Description:\n - You are running in a CLI tool to validate code patches.\n - You should analyze the code patches for correctness based on functionality\n - Code style should not be errors unless it is a big problem\n \n Input:\n-- The output of git diff command\n-- If empty treat as correct\n+- File information and git diff output\n+- If no changes, treat as correct\n+\n+File Analysis Data:\n+{diff_analysis}\n \n Output:\n - Always respond with JSON in string format specified by the pydantic JSON schema that\'s provided below\n - You MUST use this format for the output\n \n-\n Pydantic JSON schema:\n-{AIResponse.model_json_schema()}\n+{schema}\n """\n \n \n-def get_git_diff() -> str:\n+def analyze_diff_files(repo: Repo) -> DiffAnalysis:\n+    """Get file information for all files in the diff."""\n+    diffs = repo.index.diff(None)\n+    diff_output = repo.git.diff()\n+    \n+    files_info = []\n+    \n+    for diff_item in diffs:\n+        file_path = diff_item.a_path or diff_item.b_path\n+        \n+        # Get insertion/deletion counts\n+        insertions = deletions = 0\n+        try:\n+            diff_stats = repo.git.diff(\'--numstat\', file_path).strip()\n+            if diff_stats and not diff_stats.startswith(\'-\'):\n+                parts = diff_stats.split(\'\\t\')\n+                if len(parts) >= 2 and parts[0].isdigit() and parts[1].isdigit():\n+                    insertions = int(parts[0])\n+                    deletions = int(parts[1])\n+        except Exception:\n+            pass\n+        \n+        content_before = None\n+        if diff_item.change_type == \'M\': # only show content_before for modified files\n+            try:\n+                content_before = repo.git.show(f\'HEAD:{file_path}\')\n+            except Exception:\n+                if diff_item.a_blob:\n+                    content_before = diff_item.a_blob.data_stream.read().decode(\'utf-8\', errors=\'replace\')\n+\n+        files_info.append(FileInfo(\n+            path=file_path,\n+            status=diff_item.change_type,\n+            insertions=insertions,\n+            deletions=deletions,\n+            content_before=content_before,\n+        ))\n+    \n+    return DiffAnalysis(files=files_info, git_diff_output=diff_output)\n+\n+\n+def get_git_diff() -> DiffAnalysis:\n+    """Get git diff analysis."""\n     try:\n         repo = Repo(".")\n-        diff = repo.git.diff()\n-            \n+        diff = analyze_diff_files(repo)\n+        print("DIFF", diff)\n         return diff\n-        \n     except InvalidGitRepositoryError:\n-        print(f"Error: current directory is not a valid git repository", file=sys.stderr)\n+        print("Error: current directory is not a valid git repository", file=sys.stderr)\n         sys.exit(1)\n     except Exception as e:\n         print(f"Error getting git diff: {e}", file=sys.stderr)\n         sys.exit(1)\n \n-def main():\n-    code_diff = get_git_diff()\n \n-    print(f"Git diff output:\\n{code_diff}\\n" + "="*50)\n+def print_diff_summary(diff_analysis: DiffAnalysis):\n+    """Print diff summary."""\n+    print(f"\\nFiles changed: {len(diff_analysis.files)}")\n     \n-    # If diff is empty, treat as correct\n-    if not code_diff.strip():\n+    for file_info in diff_analysis.files:\n+        print(f"  {file_info.path} ({file_info.status}) +{file_info.insertions}/-{file_info.deletions}")\n+    \n+    print(f"\\nGit diff output:\\n{diff_analysis.git_diff_output}")\n+    print("="*50)\n+\n+\n+def main():\n+    diff_analysis = get_git_diff()\n+    \n+    print_diff_summary(diff_analysis)\n+    \n+    # If no files changed, treat as correct\n+    if not diff_analysis.files:\n         res = AIResponse(correct=True, reason="No changes detected in git diff")\n-        print(res)\n+        print(f"\\nResult: {res}")\n         return\n     \n+    # Prepare system prompt with diff analysis\n+    system_prompt = system_prompt_template.format(\n+        diff_analysis=diff_analysis.model_dump_json(indent=2),\n+        schema=AIResponse.model_json_schema()\n+    )\n+    \n     client = initAIClient()\n     # completion = client.chat.completions.create(\n     #     model="",\n     #     messages=[\n     #         {"role": "system", "content": system_prompt},\n-    #         {"role": "user", "content": code_diff},\n+    #         {"role": "user", "content": f"Analyze this code diff:\\n\\n{diff_analysis.git_diff_output}"},\n     #     ],\n     # )\n \n     # _res = completion.choices[0].message.content\n     _res = """{\n-        "correct": "true",\n-        "reason": "No changes detected in git diff."\n+        "correct": false,\n+        "reason": "Found logical errors: add() returns a-b instead of a+b, multiply() returns a/b instead of a*b"\n     }"""\n     \n-    print("CODE DIFF", code_diff)\n     if _res is None:\n         print("no res back from ai")\n         return\n@@ -89,8 +162,7 @@ def main():\n         _res = _res.strip().removeprefix("```json").removesuffix("```").strip()\n \n     res = AIResponse.model_validate_json(_res)\n-\n-    print(res)\n+    print(f"\\nAI Result: {res}")\n \n \n def parseArgs() -> argparse.Namespace:'

Files changed: 1
main.py (M) +94/-22

Git diff output:
diff --git a/main.py b/main.py
index a6e4c68..2fc253c 100644
--- a/main.py
+++ b/main.py
@@ -1,6 +1,7 @@
import argparse
import sys
from pathlib import Path
+from typing import List

from openai import OpenAI
from pydantic import BaseModel
@@ -14,72 +15,144 @@ def multiply(a: int, b: int):
return a / b

+class FileInfo(BaseModel):
+ path: str
+ status: str                       # A (added), M (modified), D (deleted)
+ insertions: int
+ deletions: int
+ content_before: str | None = None
+
+class DiffAnalysis(BaseModel):
+ files: List[FileInfo]
+ git_diff_output: str
+
+
class AIResponse(BaseModel):
correct: bool
reason: str

-system_prompt = f"""
+system_prompt_template = """
Description:
- You are running in a CLI tool to validate code patches.
- You should analyze the code patches for correctness based on functionality
- Code style should not be errors unless it is a big problem

Input:
-- The output of git diff command
-- If empty treat as correct
+- File information and git diff output
+- If no changes, treat as correct
+
+File Analysis Data:
+{diff_analysis}

Output:
- Always respond with JSON in string format specified by the pydantic JSON schema that's provided below
- You MUST use this format for the output

-
Pydantic JSON schema:
-{AIResponse.model_json_schema()}
+{schema}
"""

-def get_git_diff() -> str:
+def analyze_diff_files(repo: Repo) -> DiffAnalysis:
+ """Get file information for all files in the diff."""
+ diffs = repo.index.diff(None)
+ diff_output = repo.git.diff()
+
+ files_info = []
+
+ for diff_item in diffs:
+ file_path = diff_item.a_path or diff_item.b_path
+
+                                                                                        # Get insertion/deletion counts
+ insertions = deletions = 0
+ try:
+ diff_stats = repo.git.diff('--numstat', file_path).strip()
+ if diff_stats and not diff_stats.startswith('-'):
+ parts = diff_stats.split('\t')
+ if len(parts) >= 2 and parts[0].isdigit() and parts[1].isdigit():
+ insertions = int(parts[0])
+ deletions = int(parts[1])
+ except Exception:
+ pass
+
+ content_before = None
+ if diff_item.change_type == 'M':                                                       # only show content_before for modified files
+ try:
+ content_before = repo.git.show(f'HEAD:{file_path}')
+ except Exception:
+ if diff_item.a_blob:
+ content_before = diff_item.a_blob.data_stream.read().decode('utf-8', errors='replace')
+
+ files_info.append(FileInfo(
+ path=file_path,
+ status=diff_item.change_type,
+ insertions=insertions,
+ deletions=deletions,
+ content_before=content_before,
+ ))
+
+ return DiffAnalysis(files=files_info, git_diff_output=diff_output)
+
+
+def get_git_diff() -> DiffAnalysis:
+ """Get git diff analysis."""
try:
repo = Repo(".")
- diff = repo.git.diff()
-
+ diff = analyze_diff_files(repo)
+ print("DIFF", diff)
return diff
-
except InvalidGitRepositoryError:
- print(f"Error: current directory is not a valid git repository", file=sys.stderr)
+ print("Error: current directory is not a valid git repository", file=sys.stderr)
sys.exit(1)
except Exception as e:
print(f"Error getting git diff: {e}", file=sys.stderr)
sys.exit(1)

-def main():
- code_diff = get_git_diff()

- print(f"Git diff output:\n{code_diff}\n" + "="*50)
+def print_diff_summary(diff_analysis: DiffAnalysis):
+ """Print diff summary."""
+ print(f"\nFiles changed: {len(diff_analysis.files)}")

-                                                                                                  # If diff is empty, treat as correct
- if not code_diff.strip():
+ for file_info in diff_analysis.files:
+ print(f"  {file_info.path} ({file_info.status}) +{file_info.insertions}/-{file_info.deletions}")
+
+ print(f"\nGit diff output:\n{diff_analysis.git_diff_output}")
+ print("="*50)
+
+
+def main():
+ diff_analysis = get_git_diff()
+
+ print_diff_summary(diff_analysis)
+
+                                                                                                  # If no files changed, treat as correct
+ if not diff_analysis.files:
res = AIResponse(correct=True, reason="No changes detected in git diff")
- print(res)
+ print(f"\nResult: {res}")
return

+                                                        # Prepare system prompt with diff analysis
+ system_prompt = system_prompt_template.format(
+ diff_analysis=diff_analysis.model_dump_json(indent=2),
+ schema=AIResponse.model_json_schema()
+ )
+
client = initAIClient()
# completion = client.chat.completions.create(
#     model="",
#     messages=[
#         {"role": "system", "content": system_prompt},
-                                                        #         {"role": "user", "content": code_diff},
+                                                        #         {"role": "user", "content": f"Analyze this code diff:\n\n{diff_analysis.git_diff_output}"},
#     ],
# )

# _res = completion.choices[0].message.content
_res = """{
- "correct": "true",
- "reason": "No changes detected in git diff."
+ "correct": false,
+ "reason": "Found logical errors: add() returns a-b instead of a+b, multiply() returns a/b instead of a*b"
}"""

- print("CODE DIFF", code_diff)
if _res is None:
print("no res back from ai")
return
@@ -89,8 +162,7 @@ def main():
_res = _res.strip().removeprefix("```json").removesuffix("```").strip()

res = AIResponse.model_validate_json(_res)
-
- print(res)
+ print(f"\nAI Result: {res}")

def parseArgs() -> argparse.Namespace:
==================================================

AI Result: correct=False reason='Found logical errors: add() returns a-b instead of a+b, multiply() returns a/b instead of a*b'
